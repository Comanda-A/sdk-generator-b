using System;
using System.Collections.Generic;
using UnityEngine;
using Cysharp.Threading.Tasks;
using {{ spec.title | caseUcfirst }};
using {{ spec.title | caseUcfirst }}.Models;

public class {{ spec.title | caseUcfirst }}ExampleScript : MonoBehaviour
{
    [Header("{{ spec.title | caseUcfirst }} Configuration")]
    [SerializeField] private {{ spec.title | caseUcfirst }}Config config;
    
    [Header("Authentication")]
    [SerializeField] private string email = "test@example.com";
    [SerializeField] private string password = "password123";
    [SerializeField] private string name = "Test User";
    
    [Header("UI Elements")]
    [SerializeField] private UnityEngine.UI.Button loginButton;
    [SerializeField] private UnityEngine.UI.Button registerButton;
    [SerializeField] private UnityEngine.UI.Button logoutButton;
    [SerializeField] private UnityEngine.UI.Button subscribeButton;
    [SerializeField] private UnityEngine.UI.Text statusText;
    [SerializeField] private UnityEngine.UI.Text realtimeText;
    
    private {{ spec.title | caseUcfirst }}Client appwrite;
    private int realtimeSubscription = -1;
    
    async void Start()
    {
        // Try to use {{ spec.title | caseUcfirst }}Manager if available
        var manager = {{ spec.title | caseUcfirst }}Manager.Instance;
        if (manager != null && manager.IsInitialized)
        {
            appwrite = manager.Client;
            UpdateStatus("Using {{ spec.title | caseUcfirst }}Manager instance");
        }
        else
        {
            // Fallback to manual initialization
            if (config != null)
            {
                appwrite = config.CreateClient();
                UpdateStatus("Initialized with config asset");
            }
            else
            {
                // Use default settings
                appwrite = new {{ spec.title | caseUcfirst }}Client(
                    endpoint: "{{ spec.endpoint }}",
                    projectId: "[PROJECT_ID]"
                );
                UpdateStatus("Initialized with default settings - Configure your Project ID!");
            }
        }
        
        // Setup UI
        SetupUI();
        
        // Check existing session
        await CheckSession();
        
        Debug.Log("{{ spec.title | caseUcfirst }} SDK example ready!");
    }
    
    void SetupUI()
    {
        if (loginButton) loginButton.onClick.AddListener(() => Login().Forget());
        if (registerButton) registerButton.onClick.AddListener(() => Register().Forget());
        if (logoutButton) logoutButton.onClick.AddListener(() => Logout().Forget());
        if (subscribeButton) subscribeButton.onClick.AddListener(() => ToggleRealtime().Forget());
    }
    
    async UniTask CheckSession()
    {
        try
        {
            var session = appwrite.GetSession();
            if (!string.IsNullOrEmpty(session))
            {
                var user = await appwrite.Account.Get();
                UpdateStatus($"Logged in as: {user.Name}");
                EnableLoggedInUI();
            }
            else
            {
                UpdateStatus("Not logged in");
                EnableLoggedOutUI();
            }
        }
        catch (Exception ex)
        {
            Debug.LogError($"Session check failed: {ex.Message}");
            UpdateStatus("Session check failed");
            EnableLoggedOutUI();
        }
    }
    
    async UniTask Register()
    {
        try
        {
            UpdateStatus("Creating account...");
            
            var user = await appwrite.Account.Create(
                userId: ID.Unique(),
                email: email,
                password: password,
                name: name
            );
            
            UpdateStatus($"Account created: {user.Name}");
            
            // Auto-login after registration
            await Login();
        }
        catch (Exception ex)
        {
            Debug.LogError($"Registration failed: {ex.Message}");
            UpdateStatus($"Registration failed: {ex.Message}");
        }
    }
    
    async UniTask Login()
    {
        try
        {
            UpdateStatus("Logging in...");
            
            var session = await appwrite.Account.CreateEmailPasswordSession(
                email: email,
                password: password
            );
            
            appwrite.SetSession(session.Secret);
            
            var user = await appwrite.Account.Get();
            UpdateStatus($"Logged in as: {user.Name}");
            EnableLoggedInUI();
        }
        catch (Exception ex)
        {
            Debug.LogError($"Login failed: {ex.Message}");
            UpdateStatus($"Login failed: {ex.Message}");
        }
    }
    
    async UniTask Logout()
    {
        try
        {
            UpdateStatus("Logging out...");
            
            await appwrite.Account.DeleteSession("current");
            appwrite.ClearSession();
            
            UpdateStatus("Logged out");
            EnableLoggedOutUI();
            
            // Disconnect realtime if connected
            if (realtimeSubscription != -1)
            {
                await appwrite.DisconnectRealtime();
                realtimeSubscription = -1;
                UpdateRealtimeStatus("Realtime disconnected");
            }
        }
        catch (Exception ex)
        {
            Debug.LogError($"Logout failed: {ex.Message}");
            UpdateStatus($"Logout failed: {ex.Message}");
        }
    }
    
    async UniTask ToggleRealtime()
    {
        try
        {
            if (realtimeSubscription == -1)
            {
                UpdateRealtimeStatus("Connecting to realtime...");
                
                // Subscribe to account events
                realtimeSubscription = await appwrite.Subscribe<User>(
                    new[] { "account" },
                    OnRealtimeEvent
                );
                
                UpdateRealtimeStatus("Subscribed to account events");
                
                if (subscribeButton)
                {
                    subscribeButton.GetComponentInChildren<UnityEngine.UI.Text>().text = "Unsubscribe";
                }
            }
            else
            {
                appwrite.Unsubscribe(realtimeSubscription);
                await appwrite.DisconnectRealtime();
                realtimeSubscription = -1;
                
                UpdateRealtimeStatus("Unsubscribed from realtime");
                
                if (subscribeButton)
                {
                    subscribeButton.GetComponentInChildren<UnityEngine.UI.Text>().text = "Subscribe to Realtime";
                }
            }
        }
        catch (Exception ex)
        {
            Debug.LogError($"Realtime toggle failed: {ex.Message}");
            UpdateRealtimeStatus($"Realtime error: {ex.Message}");
        }
    }
    
    void OnRealtimeEvent(RealtimeResponseEvent<User> eventData)
    {
        Debug.Log($"Realtime event received: {string.Join(", ", eventData.Events)}");
        UpdateRealtimeStatus($"Event: {string.Join(", ", eventData.Events)} at {DateTimeOffset.FromUnixTimeSeconds(eventData.Timestamp):HH:mm:ss}");
    }
    
    void EnableLoggedInUI()
    {
        if (loginButton) loginButton.interactable = false;
        if (registerButton) registerButton.interactable = false;
        if (logoutButton) logoutButton.interactable = true;
        if (subscribeButton) subscribeButton.interactable = true;
    }
    
    void EnableLoggedOutUI()
    {
        if (loginButton) loginButton.interactable = true;
        if (registerButton) registerButton.interactable = true;
        if (logoutButton) logoutButton.interactable = false;
        if (subscribeButton) subscribeButton.interactable = false;
    }
    
    void UpdateStatus(string message)
    {
        if (statusText) statusText.text = message;
        Debug.Log($"Status: {message}");
    }
    
    void UpdateRealtimeStatus(string message)
    {
        if (realtimeText) realtimeText.text = message;
        Debug.Log($"Realtime: {message}");
    }
    
    async void OnDestroy()
    {
        if (appwrite != null && realtimeSubscription != -1)
        {
            try
            {
                await appwrite.DisconnectRealtime();
            }
            catch (Exception ex)
            {
                Debug.LogError($"Failed to disconnect realtime: {ex.Message}");
            }
        }
    }
}
        {
            // Initialize the client
            client = gameObject.AddComponent<Client>();
            client.SetEndpoint(endpoint)
{% for header in spec.global.headers %}
{% if header.name != 'mode' %}
                  .Set{{header.name | caseUcfirst}}({{header.key}})
{% endif %}
{% endfor %};
            
            Debug.Log("{{spec.title}} client initialized successfully!");
        }
        catch (Exception ex)
        {
            Debug.LogError($"Failed to initialize {{spec.title}} client: {ex.Message}");
        }
    }
    
    private async UniTask RunExamples()
    {
{%~ for service in spec.services %}
{%~ if loop.index0 < 3 %}
        await Example{{service.name | caseUcfirst}}();
{%~ endif %}
{%~ endfor %}
    }
    
{%~ for service in spec.services %}
{%~ if loop.index0 < 3 %}
    private async UniTask Example{{service.name | caseUcfirst}}()
    {
        Debug.Log("=== {{service.name | caseUcfirst}} Examples ===");
        
{%~ for method in service.methods %}
{%~ if loop.index0 < 2 %}
        // {{method.title}}
        try
        {
{%~ if method.parameters.all | filter(p => p.required) | length > 0 %}
            // Note: Replace with actual values
{%~ for parameter in method.parameters.all | filter(p => p.required) %}
            var {{parameter.name | caseCamel}} = {{parameter | paramExample}}; // {{parameter.description}}
{%~ endfor %}
            
{%~ endif %}
            var result = await client.{{service.name | caseUcfirst}}.{{method.name | caseUcfirst}}Async(
{%~ for parameter in method.parameters.all | filter(p => p.required) %}
                {{parameter.name | caseCamel}}{% if not loop.last %},{% endif %}

{%~ endfor %}
            );
            
            Debug.Log($"{{method.name | caseUcfirst}} success: {result}");
        }
        catch ({{spec.title | caseUcfirst}}Exception ex)
        {
            Debug.LogWarning($"{{method.name | caseUcfirst}} failed: {ex.Message} (Code: {ex.Code})");
        }
        
{%~ endif %}
{%~ endfor %}
    }
    
{%~ endif %}
{%~ endfor %}
    
    void OnDestroy()
    {
        // Client cleanup is handled automatically
    }
}
