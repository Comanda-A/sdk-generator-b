using System;
using System.Collections.Generic;
using Cysharp.Threading.Tasks;
using {{ spec.title | caseUcfirst }}.Services;
using Console = {{ spec.title | caseUcfirst }}.Services.Console;

namespace {{ spec.title | caseUcfirst }}
{
    /// <summary>
    /// {{ spec.title | caseUcfirst }} Client SDK for Unity
    /// Provides easy access to all {{ spec.title | caseUcfirst }} services with client-side features
    /// </summary>
    public class {{ spec.title | caseUcfirst }}Client
    {
        private readonly Client _client;
        private readonly Realtime _realtime;
        
        // Service instances
        {%~ for service in spec.services %}
        private {{ service.name | caseUcfirst }} _{{ service.name | caseCamel }};
        {%~ endfor %}

        /// <summary>
        /// Get the underlying HTTP client
        /// </summary>
        public Client Client => _client;
        
        /// <summary>
        /// Get the realtime client for WebSocket connections
        /// </summary>
        public Realtime Realtime => _realtime;

        // Service properties
        {%~ for service in spec.services %}
        /// <summary>
        /// {{ service.name | caseUcfirst }} service instance
        /// </summary>
        public {{ service.name | caseUcfirst }} {{ service.name | caseUcfirst }}
        {
            get
            {
                _{{ service.name | caseCamel }} ??= new {{ service.name | caseUcfirst }}(_client);
                return _{{ service.name | caseCamel }};
            }
        }

        {%~ endfor %}

        /// <summary>
        /// Initialize {{ spec.title | caseUcfirst }} client
        /// </summary>
        /// <param name="endpoint">{{ spec.title | caseUcfirst }} endpoint URL</param>
        /// <param name="projectId">Project ID</param>
        /// <param name="selfSigned">Accept self-signed certificates</param>
        public {{ spec.title | caseUcfirst }}Client(string endpoint = "{{ spec.endpoint }}", string projectId = null, bool selfSigned = false)
        {
            _client = new Client(endpoint, selfSigned);
            _realtime = new Realtime(_client);
            
            if (!string.IsNullOrEmpty(projectId))
            {
                SetProject(projectId);
            }
        }

        /// <summary>
        /// Set project ID
        /// </summary>
        /// <param name="projectId">Project ID</param>
        /// <returns>Client instance for method chaining</returns>
        public {{ spec.title | caseUcfirst }}Client SetProject(string projectId)
        {
            _client.SetProject(projectId);
            return this;
        }

        /// <summary>
        /// Set API key for server-side authentication
        /// </summary>
        /// <param name="key">API key</param>
        /// <returns>Client instance for method chaining</returns>
        public {{ spec.title | caseUcfirst }}Client SetKey(string key)
        {
            _client.SetKey(key);
            return this;
        }

        /// <summary>
        /// Set session for client-side authentication
        /// </summary>
        /// <param name="session">Session token</param>
        /// <returns>Client instance for method chaining</returns>
        public {{ spec.title | caseUcfirst }}Client SetSession(string session)
        {
            _client.SetSession(session);
            return this;
        }

        /// <summary>
        /// Set JWT token for authentication
        /// </summary>
        /// <param name="jwt">JWT token</param>
        /// <returns>Client instance for method chaining</returns>
        public {{ spec.title | caseUcfirst }}Client SetJWT(string jwt)
        {
            _client.SetJWT(jwt);
            return this;
        }

        /// <summary>
        /// Set locale for localized responses
        /// </summary>
        /// <param name="locale">Locale code</param>
        /// <returns>Client instance for method chaining</returns>
        public {{ spec.title | caseUcfirst }}Client SetLocale(string locale)
        {
            _client.SetLocale(locale);
            return this;
        }

        /// <summary>
        /// Initialize OAuth2 authentication flow
        /// </summary>
        /// <param name="provider">OAuth provider</param>
        /// <param name="success">Success URL</param>
        /// <param name="failure">Failure URL</param>
        /// <param name="scopes">OAuth scopes</param>
        /// <returns>OAuth URL</returns>
        public string PrepareOAuth2(string provider, string success = null, string failure = null, List<string> scopes = null)
        {
            return _client.PrepareOAuth2(provider, success, failure, scopes);
        }

        /// <summary>
        /// Get current session
        /// </summary>
        /// <returns>Session token</returns>
        public string GetSession()
        {
            return _client.GetSession();
        }

        /// <summary>
        /// Get current JWT
        /// </summary>
        /// <returns>JWT token</returns>
        public string GetJWT()
        {
            return _client.GetJWT();
        }

        /// <summary>
        /// Clear authentication session
        /// </summary>
        /// <returns>Client instance for method chaining</returns>
        public {{ spec.title | caseUcfirst }}Client ClearSession()
        {
            _client.ClearSession();
            return this;
        }

        /// <summary>
        /// Subscribe to realtime events
        /// </summary>
        /// <typeparam name="T">Event payload type</typeparam>
        /// <param name="channels">Channels to subscribe to</param>
        /// <param name="callback">Event callback</param>
        /// <returns>Subscription ID</returns>
        public async UniTask<int> Subscribe<T>(string[] channels, Action<RealtimeResponseEvent<T>> callback)
        {
            if (!_realtime.IsConnected)
            {
                await _realtime.Connect();
            }
            return _realtime.Subscribe(channels, callback);
        }

        /// <summary>
        /// Subscribe to realtime events (single channel)
        /// </summary>
        /// <typeparam name="T">Event payload type</typeparam>
        /// <param name="channel">Channel to subscribe to</param>
        /// <param name="callback">Event callback</param>
        /// <returns>Subscription ID</returns>
        public async UniTask<int> Subscribe<T>(string channel, Action<RealtimeResponseEvent<T>> callback)
        {
            return await Subscribe(new[] { channel }, callback);
        }

        /// <summary>
        /// Unsubscribe from realtime events
        /// </summary>
        /// <param name="subscriptionId">Subscription ID</param>
        public void Unsubscribe(int subscriptionId)
        {
            _realtime.Unsubscribe(subscriptionId);
        }

        /// <summary>
        /// Connect to realtime
        /// </summary>
        public async UniTask ConnectRealtime()
        {
            await _realtime.Connect();
        }

        /// <summary>
        /// Disconnect from realtime
        /// </summary>
        public async UniTask DisconnectRealtime()
        {
            await _realtime.Disconnect();
        }
    }
}
